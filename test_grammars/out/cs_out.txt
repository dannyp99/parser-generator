info:
topsym: goal
Production: goal --> compilation_unit 
Production: literal --> INTEGER_LITERAL 
Production: literal --> FLOATING_POINT_LITERAL 
Production: literal --> BOOLEAN_LITERAL 
Production: literal --> CHARACTER_LITERAL 
Production: literal --> STRING_LITERAL 
Production: literal --> NULL_LITERAL 
Production: type --> primitive_type 
Production: type --> reference_type 
Production: primitive_type --> numeric_type 
Production: primitive_type --> BOOLEAN 
Production: numeric_type --> integral_type 
Production: numeric_type --> floating_point_type 
Production: integral_type --> BYTE 
Production: integral_type --> SHORT 
Production: integral_type --> INT 
Production: integral_type --> LONG 
Production: integral_type --> CHAR 
Production: floating_point_type --> FLOAT 
Production: floating_point_type --> DOUBLE 
Production: reference_type --> class_or_interface_type 
Production: reference_type --> array_type 
Production: class_or_interface_type --> name 
Production: class_type --> class_or_interface_type 
Production: interface_type --> class_or_interface_type 
Production: array_type --> primitive_type dims 
Production: array_type --> name dims 
Production: name --> simple_name 
Production: name --> qualified_name 
Production: simple_name --> IDENTIFIER 
Production: qualified_name --> name DOT IDENTIFIER 
Production: compilation_unit --> package_declaration_opt import_declarations_opt type_declarations_opt 
Production: package_declaration_opt --> package_declaration 
Production: package_declaration_opt --> 
Production: import_declarations_opt --> import_declarations 
Production: import_declarations_opt --> 
Production: type_declarations_opt --> type_declarations 
Production: type_declarations_opt --> 
Production: import_declarations --> import_declaration 
Production: import_declarations --> import_declarations import_declaration 
Production: type_declarations --> type_declaration 
Production: type_declarations --> type_declarations type_declaration 
Production: package_declaration --> PACKAGE name SEMICOLON 
Production: import_declaration --> single_type_import_declaration 
Production: import_declaration --> type_import_on_demand_declaration 
Production: single_type_import_declaration --> IMPORT name SEMICOLON 
Production: type_import_on_demand_declaration --> IMPORT name DOT MULT SEMICOLON 
Production: type_declaration --> class_declaration 
Production: type_declaration --> interface_declaration 
Production: type_declaration --> SEMICOLON 
Production: modifiers_opt --> 
Production: modifiers_opt --> modifiers 
Production: modifiers --> modifier 
Production: modifiers --> modifiers modifier 
Production: modifier --> PUBLIC 
Production: modifier --> PROTECTED 
Production: modifier --> PRIVATE 
Production: modifier --> STATIC 
Production: modifier --> ABSTRACT 
Production: modifier --> FINAL 
Production: modifier --> NATIVE 
Production: modifier --> SYNCHRONIZED 
Production: modifier --> TRANSIENT 
Production: modifier --> VOLATILE 
Production: modifier --> STRICTFP 
Production: class_declaration --> modifiers_opt CLASS IDENTIFIER super_opt interfaces_opt class_body 
Production: super --> EXTENDS class_type 
Production: super_opt --> 
Production: super_opt --> super 
Production: interfaces --> IMPLEMENTS interface_type_list 
Production: interfaces_opt --> 
Production: interfaces_opt --> interfaces 
Production: interface_type_list --> interface_type 
Production: interface_type_list --> interface_type_list COMMA interface_type 
Production: class_body --> LBRACE class_body_declarations_opt RBRACE 
Production: class_body_declarations_opt --> 
Production: class_body_declarations_opt --> class_body_declarations 
Production: class_body_declarations --> class_body_declaration 
Production: class_body_declarations --> class_body_declarations class_body_declaration 
Production: class_body_declaration --> class_member_declaration 
Production: class_body_declaration --> static_initializer 
Production: class_body_declaration --> constructor_declaration 
Production: class_body_declaration --> block 
Production: class_member_declaration --> field_declaration 
Production: class_member_declaration --> method_declaration 
Production: class_member_declaration --> modifiers_opt CLASS IDENTIFIER super_opt interfaces_opt class_body 
Production: class_member_declaration --> interface_declaration 
Production: class_member_declaration --> SEMICOLON 
Production: field_declaration --> modifiers_opt type variable_declarators SEMICOLON 
Production: variable_declarators --> variable_declarator 
Production: variable_declarators --> variable_declarators COMMA variable_declarator 
Production: variable_declarator --> variable_declarator_id 
Production: variable_declarator --> variable_declarator_id EQ variable_initializer 
Production: variable_declarator_id --> IDENTIFIER 
Production: variable_declarator_id --> variable_declarator_id LBRACK RBRACK 
Production: variable_initializer --> expression 
Production: variable_initializer --> array_initializer 
Production: method_declaration --> method_header method_body 
Production: method_header --> modifiers_opt type method_declarator throws_opt 
Production: method_header --> modifiers_opt VOID method_declarator throws_opt 
Production: method_declarator --> IDENTIFIER LPAREN formal_parameter_list_opt RPAREN 
Production: method_declarator --> method_declarator LBRACK RBRACK 
Production: formal_parameter_list_opt --> 
Production: formal_parameter_list_opt --> formal_parameter_list 
Production: formal_parameter_list --> formal_parameter 
Production: formal_parameter_list --> formal_parameter_list COMMA formal_parameter 
Production: formal_parameter --> type variable_declarator_id 
Production: formal_parameter --> FINAL type variable_declarator_id 
Production: throws_opt --> 
Production: throws_opt --> throws 
Production: throws --> THROWS class_type_list 
Production: class_type_list --> class_type 
Production: class_type_list --> class_type_list COMMA class_type 
Production: method_body --> block 
Production: method_body --> SEMICOLON 
Production: static_initializer --> STATIC block 
Production: constructor_declaration --> modifiers_opt constructor_declarator throws_opt constructor_body 
Production: constructor_declarator --> simple_name LPAREN formal_parameter_list_opt RPAREN 
Production: constructor_body --> LBRACE explicit_constructor_invocation block_statements RBRACE 
Production: constructor_body --> LBRACE explicit_constructor_invocation RBRACE 
Production: constructor_body --> LBRACE block_statements RBRACE 
Production: constructor_body --> LBRACE RBRACE 
Production: explicit_constructor_invocation --> THIS LPAREN argument_list_opt RPAREN SEMICOLON 
Production: explicit_constructor_invocation --> SUPER LPAREN argument_list_opt RPAREN SEMICOLON 
Production: explicit_constructor_invocation --> primary DOT THIS LPAREN argument_list_opt RPAREN SEMICOLON 
Production: explicit_constructor_invocation --> primary DOT SUPER LPAREN argument_list_opt RPAREN SEMICOLON 
Production: interface_declaration --> modifiers_opt INTERFACE IDENTIFIER extends_interfaces_opt interface_body 
Production: extends_interfaces_opt --> 
Production: extends_interfaces_opt --> extends_interfaces 
Production: extends_interfaces --> EXTENDS interface_type 
Production: extends_interfaces --> extends_interfaces COMMA interface_type 
Production: interface_body --> LBRACE interface_member_declarations_opt RBRACE 
Production: interface_member_declarations_opt --> 
Production: interface_member_declarations_opt --> interface_member_declarations 
Production: interface_member_declarations --> interface_member_declaration 
Production: interface_member_declarations --> interface_member_declarations interface_member_declaration 
Production: interface_member_declaration --> constant_declaration 
Production: interface_member_declaration --> abstract_method_declaration 
Production: interface_member_declaration --> class_declaration 
Production: interface_member_declaration --> interface_declaration 
Production: interface_member_declaration --> SEMICOLON 
Production: constant_declaration --> field_declaration 
Production: abstract_method_declaration --> method_header SEMICOLON 
Production: array_initializer --> LBRACE variable_initializers COMMA RBRACE 
Production: array_initializer --> LBRACE variable_initializers RBRACE 
Production: array_initializer --> LBRACE COMMA RBRACE 
Production: array_initializer --> LBRACE RBRACE 
Production: variable_initializers --> variable_initializer 
Production: variable_initializers --> variable_initializers COMMA variable_initializer 
Production: block --> LBRACE block_statements_opt RBRACE 
Production: block_statements_opt --> 
Production: block_statements_opt --> block_statements 
Production: block_statements --> block_statement 
Production: block_statements --> block_statements block_statement 
Production: block_statement --> local_variable_declaration_statement 
Production: block_statement --> statement 
Production: block_statement --> class_declaration 
Production: block_statement --> interface_declaration 
Production: local_variable_declaration_statement --> local_variable_declaration SEMICOLON 
Production: local_variable_declaration --> type variable_declarators 
Production: local_variable_declaration --> FINAL type variable_declarators 
Production: statement --> statement_without_trailing_substatement 
Production: statement --> labeled_statement 
Production: statement --> if_then_statement 
Production: statement --> if_then_else_statement 
Production: statement --> while_statement 
Production: statement --> for_statement 
Production: statement_no_short_if --> statement_without_trailing_substatement 
Production: statement_no_short_if --> labeled_statement_no_short_if 
Production: statement_no_short_if --> if_then_else_statement_no_short_if 
Production: statement_no_short_if --> while_statement_no_short_if 
Production: statement_no_short_if --> for_statement_no_short_if 
Production: statement_without_trailing_substatement --> block 
Production: statement_without_trailing_substatement --> empty_statement 
Production: statement_without_trailing_substatement --> expression_statement 
Production: statement_without_trailing_substatement --> switch_statement 
Production: statement_without_trailing_substatement --> do_statement 
Production: statement_without_trailing_substatement --> break_statement 
Production: statement_without_trailing_substatement --> continue_statement 
Production: statement_without_trailing_substatement --> return_statement 
Production: statement_without_trailing_substatement --> synchronized_statement 
Production: statement_without_trailing_substatement --> throw_statement 
Production: statement_without_trailing_substatement --> try_statement 
Production: statement_without_trailing_substatement --> assert_statement 
Production: empty_statement --> SEMICOLON 
Production: labeled_statement --> IDENTIFIER COLON statement 
Production: labeled_statement_no_short_if --> IDENTIFIER COLON statement_no_short_if 
Production: expression_statement --> statement_expression SEMICOLON 
Production: statement_expression --> assignment 
Production: statement_expression --> preincrement_expression 
Production: statement_expression --> predecrement_expression 
Production: statement_expression --> postincrement_expression 
Production: statement_expression --> postdecrement_expression 
Production: statement_expression --> method_invocation 
Production: statement_expression --> class_instance_creation_expression 
Production: if_then_statement --> IF LPAREN expression RPAREN statement 
Production: if_then_else_statement --> IF LPAREN expression RPAREN statement_no_short_if ELSE statement 
Production: if_then_else_statement_no_short_if --> IF LPAREN expression RPAREN statement_no_short_if ELSE statement_no_short_if 
Production: switch_statement --> SWITCH LPAREN expression RPAREN switch_block 
Production: switch_block --> LBRACE switch_block_statement_groups switch_labels RBRACE 
Production: switch_block --> LBRACE switch_block_statement_groups RBRACE 
Production: switch_block --> LBRACE switch_labels RBRACE 
Production: switch_block --> LBRACE RBRACE 
Production: switch_block_statement_groups --> switch_block_statement_group 
Production: switch_block_statement_groups --> switch_block_statement_groups switch_block_statement_group 
Production: switch_block_statement_group --> switch_labels block_statements 
Production: switch_labels --> switch_label 
Production: switch_labels --> switch_labels switch_label 
Production: switch_label --> CASE constant_expression COLON 
Production: switch_label --> DEFAULT COLON 
Production: while_statement --> WHILE LPAREN expression RPAREN statement 
Production: while_statement_no_short_if --> WHILE LPAREN expression RPAREN statement_no_short_if 
Production: do_statement --> DO statement WHILE LPAREN expression RPAREN SEMICOLON 
Production: for_statement --> FOR LPAREN for_init_opt SEMICOLON expression_opt SEMICOLON for_update_opt RPAREN statement 
Production: for_statement_no_short_if --> FOR LPAREN for_init_opt SEMICOLON expression_opt SEMICOLON for_update_opt RPAREN statement_no_short_if 
Production: for_init_opt --> 
Production: for_init_opt --> for_init 
Production: for_init --> statement_expression_list 
Production: for_init --> local_variable_declaration 
Production: for_update_opt --> 
Production: for_update_opt --> for_update 
Production: for_update --> statement_expression_list 
Production: statement_expression_list --> statement_expression 
Production: statement_expression_list --> statement_expression_list COMMA statement_expression 
Production: identifier_opt --> 
Production: identifier_opt --> IDENTIFIER 
Production: break_statement --> BREAK identifier_opt SEMICOLON 
Production: continue_statement --> CONTINUE identifier_opt SEMICOLON 
Production: return_statement --> RETURN expression_opt SEMICOLON 
Production: throw_statement --> THROW expression SEMICOLON 
Production: synchronized_statement --> SYNCHRONIZED LPAREN expression RPAREN block 
Production: try_statement --> TRY block catches 
Production: try_statement --> TRY block catches_opt finally 
Production: catches_opt --> 
Production: catches_opt --> catches 
Production: catches --> catch_clause 
Production: catches --> catches catch_clause 
Production: catch_clause --> CATCH LPAREN formal_parameter RPAREN block 
Production: finally --> FINALLY block 
Production: assert_statement --> ASSERT expression SEMICOLON 
Production: assert_statement --> ASSERT expression COLON expression SEMICOLON 
Production: primary --> primary_no_new_array 
Production: primary --> array_creation_init 
Production: primary --> array_creation_uninit 
Production: primary_no_new_array --> literal 
Production: primary_no_new_array --> THIS 
Production: primary_no_new_array --> LPAREN expression RPAREN 
Production: primary_no_new_array --> class_instance_creation_expression 
Production: primary_no_new_array --> field_access 
Production: primary_no_new_array --> method_invocation 
Production: primary_no_new_array --> array_access 
Production: primary_no_new_array --> primitive_type DOT CLASS 
Production: primary_no_new_array --> VOID DOT CLASS 
Production: primary_no_new_array --> array_type DOT CLASS 
Production: primary_no_new_array --> name DOT CLASS 
Production: primary_no_new_array --> name DOT THIS 
Production: class_instance_creation_expression --> NEW class_or_interface_type LPAREN argument_list_opt RPAREN 
Production: class_instance_creation_expression --> NEW class_or_interface_type LPAREN argument_list_opt RPAREN class_body 
Production: class_instance_creation_expression --> primary DOT NEW IDENTIFIER LPAREN argument_list_opt RPAREN 
Production: class_instance_creation_expression --> primary DOT NEW IDENTIFIER LPAREN argument_list_opt RPAREN class_body 
Production: class_instance_creation_expression --> name DOT NEW IDENTIFIER LPAREN argument_list_opt RPAREN 
Production: class_instance_creation_expression --> name DOT NEW IDENTIFIER LPAREN argument_list_opt RPAREN class_body 
Production: argument_list_opt --> 
Production: argument_list_opt --> argument_list 
Production: argument_list --> expression 
Production: argument_list --> argument_list COMMA expression 
Production: array_creation_uninit --> NEW primitive_type dim_exprs dims_opt 
Production: array_creation_uninit --> NEW class_or_interface_type dim_exprs dims_opt 
Production: array_creation_init --> NEW primitive_type dims array_initializer 
Production: array_creation_init --> NEW class_or_interface_type dims array_initializer 
Production: dim_exprs --> dim_expr 
Production: dim_exprs --> dim_exprs dim_expr 
Production: dim_expr --> LBRACK expression RBRACK 
Production: dims_opt --> 
Production: dims_opt --> dims 
Production: dims --> LBRACK RBRACK 
Production: dims --> dims LBRACK RBRACK 
Production: field_access --> primary DOT IDENTIFIER 
Production: field_access --> SUPER DOT IDENTIFIER 
Production: field_access --> name DOT SUPER DOT IDENTIFIER 
Production: method_invocation --> name LPAREN argument_list_opt RPAREN 
Production: method_invocation --> primary DOT IDENTIFIER LPAREN argument_list_opt RPAREN 
Production: method_invocation --> SUPER DOT IDENTIFIER LPAREN argument_list_opt RPAREN 
Production: method_invocation --> name DOT SUPER DOT IDENTIFIER LPAREN argument_list_opt RPAREN 
Production: array_access --> name LBRACK expression RBRACK 
Production: array_access --> primary_no_new_array LBRACK expression RBRACK 
Production: array_access --> array_creation_init LBRACK expression RBRACK 
Production: postfix_expression --> primary 
Production: postfix_expression --> name 
Production: postfix_expression --> postincrement_expression 
Production: postfix_expression --> postdecrement_expression 
Production: postincrement_expression --> postfix_expression PLUSPLUS 
Production: postdecrement_expression --> postfix_expression MINUSMINUS 
Production: unary_expression --> preincrement_expression 
Production: unary_expression --> predecrement_expression 
Production: unary_expression --> PLUS unary_expression 
Production: unary_expression --> MINUS unary_expression 
Production: unary_expression --> unary_expression_not_plus_minus 
Production: preincrement_expression --> PLUSPLUS unary_expression 
Production: predecrement_expression --> MINUSMINUS unary_expression 
Production: unary_expression_not_plus_minus --> postfix_expression 
Production: unary_expression_not_plus_minus --> COMP unary_expression 
Production: unary_expression_not_plus_minus --> NOT unary_expression 
Production: unary_expression_not_plus_minus --> cast_expression 
Production: cast_expression --> LPAREN primitive_type dims_opt RPAREN unary_expression 
Production: cast_expression --> LPAREN expression RPAREN unary_expression_not_plus_minus 
Production: cast_expression --> LPAREN name dims RPAREN unary_expression_not_plus_minus 
Production: multiplicative_expression --> unary_expression 
Production: multiplicative_expression --> multiplicative_expression MULT unary_expression 
Production: multiplicative_expression --> multiplicative_expression DIV unary_expression 
Production: multiplicative_expression --> multiplicative_expression MOD unary_expression 
Production: additive_expression --> multiplicative_expression 
Production: additive_expression --> additive_expression PLUS multiplicative_expression 
Production: additive_expression --> additive_expression MINUS multiplicative_expression 
Production: shift_expression --> additive_expression 
Production: shift_expression --> shift_expression LSHIFT additive_expression 
Production: shift_expression --> shift_expression RSHIFT additive_expression 
Production: shift_expression --> shift_expression URSHIFT additive_expression 
Production: relational_expression --> shift_expression 
Production: relational_expression --> relational_expression LT shift_expression 
Production: relational_expression --> relational_expression GT shift_expression 
Production: relational_expression --> relational_expression LTEQ shift_expression 
Production: relational_expression --> relational_expression GTEQ shift_expression 
Production: relational_expression --> relational_expression INSTANCEOF reference_type 
Production: equality_expression --> relational_expression 
Production: equality_expression --> equality_expression EQEQ relational_expression 
Production: equality_expression --> equality_expression NOTEQ relational_expression 
Production: and_expression --> equality_expression 
Production: and_expression --> and_expression AND equality_expression 
Production: exclusive_or_expression --> and_expression 
Production: exclusive_or_expression --> exclusive_or_expression XOR and_expression 
Production: inclusive_or_expression --> exclusive_or_expression 
Production: inclusive_or_expression --> inclusive_or_expression OR exclusive_or_expression 
Production: conditional_and_expression --> inclusive_or_expression 
Production: conditional_and_expression --> conditional_and_expression ANDAND inclusive_or_expression 
Production: conditional_or_expression --> conditional_and_expression 
Production: conditional_or_expression --> conditional_or_expression OROR conditional_and_expression 
Production: conditional_expression --> conditional_or_expression 
Production: conditional_expression --> conditional_or_expression QUESTION expression COLON conditional_expression 
Production: assignment_expression --> conditional_expression 
Production: assignment_expression --> assignment 
Production: assignment --> postfix_expression assignment_operator assignment_expression 
Production: assignment_operator --> EQ 
Production: assignment_operator --> MULTEQ 
Production: assignment_operator --> DIVEQ 
Production: assignment_operator --> MODEQ 
Production: assignment_operator --> PLUSEQ 
Production: assignment_operator --> MINUSEQ 
Production: assignment_operator --> LSHIFTEQ 
Production: assignment_operator --> RSHIFTEQ 
Production: assignment_operator --> URSHIFTEQ 
Production: assignment_operator --> ANDEQ 
Production: assignment_operator --> XOREQ 
Production: assignment_operator --> OREQ 
Production: expression_opt --> 
Production: expression_opt --> expression 
Production: expression --> assignment_expression 
Production: constant_expression --> expression 
Production: START --> goal EOF 
First(goal) = ABSTRACT CLASS FINAL IMPORT INTERFACE NATIVE PACKAGE PRIVATE PROTECTED PUBLIC SEMICOLON STATIC STRICTFP SYNCHRONIZED TRANSIENT VOLATILE 
First(literal) = BOOLEAN_LITERAL CHARACTER_LITERAL FLOATING_POINT_LITERAL INTEGER_LITERAL NULL_LITERAL STRING_LITERAL 
First(type) = BOOLEAN BYTE CHAR DOUBLE FLOAT IDENTIFIER INT LONG SHORT 
First(primitive_type) = BOOLEAN BYTE CHAR DOUBLE FLOAT INT LONG SHORT 
First(numeric_type) = BYTE CHAR DOUBLE FLOAT INT LONG SHORT 
First(integral_type) = BYTE CHAR INT LONG SHORT 
First(floating_point_type) = DOUBLE FLOAT 
First(reference_type) = BOOLEAN BYTE CHAR DOUBLE FLOAT IDENTIFIER INT LONG SHORT 
First(class_or_interface_type) = IDENTIFIER 
First(class_type) = IDENTIFIER 
First(interface_type) = IDENTIFIER 
First(array_type) = BOOLEAN BYTE CHAR DOUBLE FLOAT IDENTIFIER INT LONG SHORT 
First(name) = IDENTIFIER 
First(simple_name) = IDENTIFIER 
First(qualified_name) = IDENTIFIER 
First(compilation_unit) = ABSTRACT CLASS FINAL IMPORT INTERFACE NATIVE PACKAGE PRIVATE PROTECTED PUBLIC SEMICOLON STATIC STRICTFP SYNCHRONIZED TRANSIENT VOLATILE 
First(package_declaration_opt) = PACKAGE 
First(import_declarations_opt) = IMPORT 
First(type_declarations_opt) = ABSTRACT CLASS FINAL INTERFACE NATIVE PRIVATE PROTECTED PUBLIC SEMICOLON STATIC STRICTFP SYNCHRONIZED TRANSIENT VOLATILE 
First(import_declarations) = IMPORT 
First(type_declarations) = ABSTRACT CLASS FINAL INTERFACE NATIVE PRIVATE PROTECTED PUBLIC SEMICOLON STATIC STRICTFP SYNCHRONIZED TRANSIENT VOLATILE 
First(package_declaration) = PACKAGE 
First(import_declaration) = IMPORT 
First(single_type_import_declaration) = IMPORT 
First(type_import_on_demand_declaration) = IMPORT 
First(type_declaration) = ABSTRACT CLASS FINAL INTERFACE NATIVE PRIVATE PROTECTED PUBLIC SEMICOLON STATIC STRICTFP SYNCHRONIZED TRANSIENT VOLATILE 
First(modifiers_opt) = ABSTRACT FINAL NATIVE PRIVATE PROTECTED PUBLIC STATIC STRICTFP SYNCHRONIZED TRANSIENT VOLATILE 
First(modifiers) = ABSTRACT FINAL NATIVE PRIVATE PROTECTED PUBLIC STATIC STRICTFP SYNCHRONIZED TRANSIENT VOLATILE 
First(modifier) = ABSTRACT FINAL NATIVE PRIVATE PROTECTED PUBLIC STATIC STRICTFP SYNCHRONIZED TRANSIENT VOLATILE 
First(class_declaration) = ABSTRACT CLASS FINAL NATIVE PRIVATE PROTECTED PUBLIC STATIC STRICTFP SYNCHRONIZED TRANSIENT VOLATILE 
First(super) = EXTENDS 
First(super_opt) = EXTENDS 
First(interfaces) = IMPLEMENTS 
First(interfaces_opt) = IMPLEMENTS 
First(interface_type_list) = IDENTIFIER 
First(class_body) = LBRACE 
First(class_body_declarations_opt) = ABSTRACT BOOLEAN BYTE CHAR CLASS DOUBLE FINAL FLOAT IDENTIFIER INT INTERFACE LBRACE LONG NATIVE PRIVATE PROTECTED PUBLIC SEMICOLON SHORT STATIC STRICTFP SYNCHRONIZED TRANSIENT VOID VOLATILE 
First(class_body_declarations) = ABSTRACT BOOLEAN BYTE CHAR CLASS DOUBLE FINAL FLOAT IDENTIFIER INT INTERFACE LBRACE LONG NATIVE PRIVATE PROTECTED PUBLIC SEMICOLON SHORT STATIC STRICTFP SYNCHRONIZED TRANSIENT VOID VOLATILE 
First(class_body_declaration) = ABSTRACT BOOLEAN BYTE CHAR CLASS DOUBLE FINAL FLOAT IDENTIFIER INT INTERFACE LBRACE LONG NATIVE PRIVATE PROTECTED PUBLIC SEMICOLON SHORT STATIC STRICTFP SYNCHRONIZED TRANSIENT VOID VOLATILE 
First(class_member_declaration) = ABSTRACT BOOLEAN BYTE CHAR CLASS DOUBLE FINAL FLOAT IDENTIFIER INT INTERFACE LONG NATIVE PRIVATE PROTECTED PUBLIC SEMICOLON SHORT STATIC STRICTFP SYNCHRONIZED TRANSIENT VOID VOLATILE 
First(field_declaration) = ABSTRACT BOOLEAN BYTE CHAR DOUBLE FINAL FLOAT IDENTIFIER INT LONG NATIVE PRIVATE PROTECTED PUBLIC SHORT STATIC STRICTFP SYNCHRONIZED TRANSIENT VOLATILE 
First(variable_declarators) = IDENTIFIER 
First(variable_declarator) = IDENTIFIER 
First(variable_declarator_id) = IDENTIFIER 
First(variable_initializer) = BOOLEAN BOOLEAN_LITERAL BYTE CHAR CHARACTER_LITERAL COMP DOUBLE FLOAT FLOATING_POINT_LITERAL IDENTIFIER INT INTEGER_LITERAL LBRACE LONG LPAREN MINUS MINUSMINUS NEW NOT NULL_LITERAL PLUS PLUSPLUS SHORT STRING_LITERAL SUPER THIS VOID 
First(method_declaration) = ABSTRACT BOOLEAN BYTE CHAR DOUBLE FINAL FLOAT IDENTIFIER INT LONG NATIVE PRIVATE PROTECTED PUBLIC SHORT STATIC STRICTFP SYNCHRONIZED TRANSIENT VOID VOLATILE 
First(method_header) = ABSTRACT BOOLEAN BYTE CHAR DOUBLE FINAL FLOAT IDENTIFIER INT LONG NATIVE PRIVATE PROTECTED PUBLIC SHORT STATIC STRICTFP SYNCHRONIZED TRANSIENT VOID VOLATILE 
First(method_declarator) = IDENTIFIER 
First(formal_parameter_list_opt) = BOOLEAN BYTE CHAR DOUBLE FINAL FLOAT IDENTIFIER INT LONG SHORT 
First(formal_parameter_list) = BOOLEAN BYTE CHAR DOUBLE FINAL FLOAT IDENTIFIER INT LONG SHORT 
First(formal_parameter) = BOOLEAN BYTE CHAR DOUBLE FINAL FLOAT IDENTIFIER INT LONG SHORT 
First(throws_opt) = THROWS 
First(throws) = THROWS 
First(class_type_list) = IDENTIFIER 
First(method_body) = LBRACE SEMICOLON 
First(static_initializer) = STATIC 
First(constructor_declaration) = ABSTRACT FINAL IDENTIFIER NATIVE PRIVATE PROTECTED PUBLIC STATIC STRICTFP SYNCHRONIZED TRANSIENT VOLATILE 
First(constructor_declarator) = IDENTIFIER 
First(constructor_body) = LBRACE 
First(explicit_constructor_invocation) = BOOLEAN BOOLEAN_LITERAL BYTE CHAR CHARACTER_LITERAL DOUBLE FLOAT FLOATING_POINT_LITERAL IDENTIFIER INT INTEGER_LITERAL LONG LPAREN NEW NULL_LITERAL SHORT STRING_LITERAL SUPER THIS VOID 
First(interface_declaration) = ABSTRACT FINAL INTERFACE NATIVE PRIVATE PROTECTED PUBLIC STATIC STRICTFP SYNCHRONIZED TRANSIENT VOLATILE 
First(extends_interfaces_opt) = EXTENDS 
First(extends_interfaces) = EXTENDS 
First(interface_body) = LBRACE 
First(interface_member_declarations_opt) = ABSTRACT BOOLEAN BYTE CHAR CLASS DOUBLE FINAL FLOAT IDENTIFIER INT INTERFACE LONG NATIVE PRIVATE PROTECTED PUBLIC SEMICOLON SHORT STATIC STRICTFP SYNCHRONIZED TRANSIENT VOID VOLATILE 
First(interface_member_declarations) = ABSTRACT BOOLEAN BYTE CHAR CLASS DOUBLE FINAL FLOAT IDENTIFIER INT INTERFACE LONG NATIVE PRIVATE PROTECTED PUBLIC SEMICOLON SHORT STATIC STRICTFP SYNCHRONIZED TRANSIENT VOID VOLATILE 
First(interface_member_declaration) = ABSTRACT BOOLEAN BYTE CHAR CLASS DOUBLE FINAL FLOAT IDENTIFIER INT INTERFACE LONG NATIVE PRIVATE PROTECTED PUBLIC SEMICOLON SHORT STATIC STRICTFP SYNCHRONIZED TRANSIENT VOID VOLATILE 
First(constant_declaration) = ABSTRACT BOOLEAN BYTE CHAR DOUBLE FINAL FLOAT IDENTIFIER INT LONG NATIVE PRIVATE PROTECTED PUBLIC SHORT STATIC STRICTFP SYNCHRONIZED TRANSIENT VOLATILE 
First(abstract_method_declaration) = ABSTRACT BOOLEAN BYTE CHAR DOUBLE FINAL FLOAT IDENTIFIER INT LONG NATIVE PRIVATE PROTECTED PUBLIC SHORT STATIC STRICTFP SYNCHRONIZED TRANSIENT VOID VOLATILE 
First(array_initializer) = LBRACE 
First(variable_initializers) = BOOLEAN BOOLEAN_LITERAL BYTE CHAR CHARACTER_LITERAL COMP DOUBLE FLOAT FLOATING_POINT_LITERAL IDENTIFIER INT INTEGER_LITERAL LBRACE LONG LPAREN MINUS MINUSMINUS NEW NOT NULL_LITERAL PLUS PLUSPLUS SHORT STRING_LITERAL SUPER THIS VOID 
First(block) = LBRACE 
First(block_statements_opt) = ABSTRACT ASSERT BOOLEAN BOOLEAN_LITERAL BREAK BYTE CHAR CHARACTER_LITERAL CLASS CONTINUE DO DOUBLE FINAL FLOAT FLOATING_POINT_LITERAL FOR IDENTIFIER IF INT INTEGER_LITERAL INTERFACE LBRACE LONG LPAREN MINUSMINUS NATIVE NEW NULL_LITERAL PLUSPLUS PRIVATE PROTECTED PUBLIC RETURN SEMICOLON SHORT STATIC STRICTFP STRING_LITERAL SUPER SWITCH SYNCHRONIZED THIS THROW TRANSIENT TRY VOID VOLATILE WHILE 
First(block_statements) = ABSTRACT ASSERT BOOLEAN BOOLEAN_LITERAL BREAK BYTE CHAR CHARACTER_LITERAL CLASS CONTINUE DO DOUBLE FINAL FLOAT FLOATING_POINT_LITERAL FOR IDENTIFIER IF INT INTEGER_LITERAL INTERFACE LBRACE LONG LPAREN MINUSMINUS NATIVE NEW NULL_LITERAL PLUSPLUS PRIVATE PROTECTED PUBLIC RETURN SEMICOLON SHORT STATIC STRICTFP STRING_LITERAL SUPER SWITCH SYNCHRONIZED THIS THROW TRANSIENT TRY VOID VOLATILE WHILE 
First(block_statement) = ABSTRACT ASSERT BOOLEAN BOOLEAN_LITERAL BREAK BYTE CHAR CHARACTER_LITERAL CLASS CONTINUE DO DOUBLE FINAL FLOAT FLOATING_POINT_LITERAL FOR IDENTIFIER IF INT INTEGER_LITERAL INTERFACE LBRACE LONG LPAREN MINUSMINUS NATIVE NEW NULL_LITERAL PLUSPLUS PRIVATE PROTECTED PUBLIC RETURN SEMICOLON SHORT STATIC STRICTFP STRING_LITERAL SUPER SWITCH SYNCHRONIZED THIS THROW TRANSIENT TRY VOID VOLATILE WHILE 
First(local_variable_declaration_statement) = BOOLEAN BYTE CHAR DOUBLE FINAL FLOAT IDENTIFIER INT LONG SHORT 
First(local_variable_declaration) = BOOLEAN BYTE CHAR DOUBLE FINAL FLOAT IDENTIFIER INT LONG SHORT 
First(statement) = ASSERT BOOLEAN BOOLEAN_LITERAL BREAK BYTE CHAR CHARACTER_LITERAL CONTINUE DO DOUBLE FLOAT FLOATING_POINT_LITERAL FOR IDENTIFIER IF INT INTEGER_LITERAL LBRACE LONG LPAREN MINUSMINUS NEW NULL_LITERAL PLUSPLUS RETURN SEMICOLON SHORT STRING_LITERAL SUPER SWITCH SYNCHRONIZED THIS THROW TRY VOID WHILE 
First(statement_no_short_if) = ASSERT BOOLEAN BOOLEAN_LITERAL BREAK BYTE CHAR CHARACTER_LITERAL CONTINUE DO DOUBLE FLOAT FLOATING_POINT_LITERAL FOR IDENTIFIER IF INT INTEGER_LITERAL LBRACE LONG LPAREN MINUSMINUS NEW NULL_LITERAL PLUSPLUS RETURN SEMICOLON SHORT STRING_LITERAL SUPER SWITCH SYNCHRONIZED THIS THROW TRY VOID WHILE 
First(statement_without_trailing_substatement) = ASSERT BOOLEAN BOOLEAN_LITERAL BREAK BYTE CHAR CHARACTER_LITERAL CONTINUE DO DOUBLE FLOAT FLOATING_POINT_LITERAL IDENTIFIER INT INTEGER_LITERAL LBRACE LONG LPAREN MINUSMINUS NEW NULL_LITERAL PLUSPLUS RETURN SEMICOLON SHORT STRING_LITERAL SUPER SWITCH SYNCHRONIZED THIS THROW TRY VOID 
First(empty_statement) = SEMICOLON 
First(labeled_statement) = IDENTIFIER 
First(labeled_statement_no_short_if) = IDENTIFIER 
First(expression_statement) = BOOLEAN BOOLEAN_LITERAL BYTE CHAR CHARACTER_LITERAL DOUBLE FLOAT FLOATING_POINT_LITERAL IDENTIFIER INT INTEGER_LITERAL LONG LPAREN MINUSMINUS NEW NULL_LITERAL PLUSPLUS SHORT STRING_LITERAL SUPER THIS VOID 
First(statement_expression) = BOOLEAN BOOLEAN_LITERAL BYTE CHAR CHARACTER_LITERAL DOUBLE FLOAT FLOATING_POINT_LITERAL IDENTIFIER INT INTEGER_LITERAL LONG LPAREN MINUSMINUS NEW NULL_LITERAL PLUSPLUS SHORT STRING_LITERAL SUPER THIS VOID 
First(if_then_statement) = IF 
First(if_then_else_statement) = IF 
First(if_then_else_statement_no_short_if) = IF 
First(switch_statement) = SWITCH 
First(switch_block) = LBRACE 
First(switch_block_statement_groups) = CASE DEFAULT 
First(switch_block_statement_group) = CASE DEFAULT 
First(switch_labels) = CASE DEFAULT 
First(switch_label) = CASE DEFAULT 
First(while_statement) = WHILE 
First(while_statement_no_short_if) = WHILE 
First(do_statement) = DO 
First(for_statement) = FOR 
First(for_statement_no_short_if) = FOR 
First(for_init_opt) = BOOLEAN BOOLEAN_LITERAL BYTE CHAR CHARACTER_LITERAL DOUBLE FINAL FLOAT FLOATING_POINT_LITERAL IDENTIFIER INT INTEGER_LITERAL LONG LPAREN MINUSMINUS NEW NULL_LITERAL PLUSPLUS SHORT STRING_LITERAL SUPER THIS VOID 
First(for_init) = BOOLEAN BOOLEAN_LITERAL BYTE CHAR CHARACTER_LITERAL DOUBLE FINAL FLOAT FLOATING_POINT_LITERAL IDENTIFIER INT INTEGER_LITERAL LONG LPAREN MINUSMINUS NEW NULL_LITERAL PLUSPLUS SHORT STRING_LITERAL SUPER THIS VOID 
First(for_update_opt) = BOOLEAN BOOLEAN_LITERAL BYTE CHAR CHARACTER_LITERAL DOUBLE FLOAT FLOATING_POINT_LITERAL IDENTIFIER INT INTEGER_LITERAL LONG LPAREN MINUSMINUS NEW NULL_LITERAL PLUSPLUS SHORT STRING_LITERAL SUPER THIS VOID 
First(for_update) = BOOLEAN BOOLEAN_LITERAL BYTE CHAR CHARACTER_LITERAL DOUBLE FLOAT FLOATING_POINT_LITERAL IDENTIFIER INT INTEGER_LITERAL LONG LPAREN MINUSMINUS NEW NULL_LITERAL PLUSPLUS SHORT STRING_LITERAL SUPER THIS VOID 
First(statement_expression_list) = BOOLEAN BOOLEAN_LITERAL BYTE CHAR CHARACTER_LITERAL DOUBLE FLOAT FLOATING_POINT_LITERAL IDENTIFIER INT INTEGER_LITERAL LONG LPAREN MINUSMINUS NEW NULL_LITERAL PLUSPLUS SHORT STRING_LITERAL SUPER THIS VOID 
First(identifier_opt) = IDENTIFIER 
First(break_statement) = BREAK 
First(continue_statement) = CONTINUE 
First(return_statement) = RETURN 
First(throw_statement) = THROW 
First(synchronized_statement) = SYNCHRONIZED 
First(try_statement) = TRY 
First(catches_opt) = CATCH 
First(catches) = CATCH 
First(catch_clause) = CATCH 
First(finally) = FINALLY 
First(assert_statement) = ASSERT 
First(primary) = BOOLEAN BOOLEAN_LITERAL BYTE CHAR CHARACTER_LITERAL DOUBLE FLOAT FLOATING_POINT_LITERAL IDENTIFIER INT INTEGER_LITERAL LONG LPAREN NEW NULL_LITERAL SHORT STRING_LITERAL SUPER THIS VOID 
First(primary_no_new_array) = BOOLEAN BOOLEAN_LITERAL BYTE CHAR CHARACTER_LITERAL DOUBLE FLOAT FLOATING_POINT_LITERAL IDENTIFIER INT INTEGER_LITERAL LONG LPAREN NEW NULL_LITERAL SHORT STRING_LITERAL SUPER THIS VOID 
First(class_instance_creation_expression) = BOOLEAN BOOLEAN_LITERAL BYTE CHAR CHARACTER_LITERAL DOUBLE FLOAT FLOATING_POINT_LITERAL IDENTIFIER INT INTEGER_LITERAL LONG LPAREN NEW NULL_LITERAL SHORT STRING_LITERAL SUPER THIS VOID 
First(argument_list_opt) = BOOLEAN BOOLEAN_LITERAL BYTE CHAR CHARACTER_LITERAL COMP DOUBLE FLOAT FLOATING_POINT_LITERAL IDENTIFIER INT INTEGER_LITERAL LONG LPAREN MINUS MINUSMINUS NEW NOT NULL_LITERAL PLUS PLUSPLUS SHORT STRING_LITERAL SUPER THIS VOID 
First(argument_list) = BOOLEAN BOOLEAN_LITERAL BYTE CHAR CHARACTER_LITERAL COMP DOUBLE FLOAT FLOATING_POINT_LITERAL IDENTIFIER INT INTEGER_LITERAL LONG LPAREN MINUS MINUSMINUS NEW NOT NULL_LITERAL PLUS PLUSPLUS SHORT STRING_LITERAL SUPER THIS VOID 
First(array_creation_uninit) = NEW 
First(array_creation_init) = NEW 
First(dim_exprs) = LBRACK 
First(dim_expr) = LBRACK 
First(dims_opt) = LBRACK 
First(dims) = LBRACK 
First(field_access) = BOOLEAN BOOLEAN_LITERAL BYTE CHAR CHARACTER_LITERAL DOUBLE FLOAT FLOATING_POINT_LITERAL IDENTIFIER INT INTEGER_LITERAL LONG LPAREN NEW NULL_LITERAL SHORT STRING_LITERAL SUPER THIS VOID 
First(method_invocation) = BOOLEAN BOOLEAN_LITERAL BYTE CHAR CHARACTER_LITERAL DOUBLE FLOAT FLOATING_POINT_LITERAL IDENTIFIER INT INTEGER_LITERAL LONG LPAREN NEW NULL_LITERAL SHORT STRING_LITERAL SUPER THIS VOID 
First(array_access) = BOOLEAN BOOLEAN_LITERAL BYTE CHAR CHARACTER_LITERAL DOUBLE FLOAT FLOATING_POINT_LITERAL IDENTIFIER INT INTEGER_LITERAL LONG LPAREN NEW NULL_LITERAL SHORT STRING_LITERAL SUPER THIS VOID 
First(postfix_expression) = BOOLEAN BOOLEAN_LITERAL BYTE CHAR CHARACTER_LITERAL DOUBLE FLOAT FLOATING_POINT_LITERAL IDENTIFIER INT INTEGER_LITERAL LONG LPAREN NEW NULL_LITERAL SHORT STRING_LITERAL SUPER THIS VOID 
First(postincrement_expression) = BOOLEAN BOOLEAN_LITERAL BYTE CHAR CHARACTER_LITERAL DOUBLE FLOAT FLOATING_POINT_LITERAL IDENTIFIER INT INTEGER_LITERAL LONG LPAREN NEW NULL_LITERAL SHORT STRING_LITERAL SUPER THIS VOID 
First(postdecrement_expression) = BOOLEAN BOOLEAN_LITERAL BYTE CHAR CHARACTER_LITERAL DOUBLE FLOAT FLOATING_POINT_LITERAL IDENTIFIER INT INTEGER_LITERAL LONG LPAREN NEW NULL_LITERAL SHORT STRING_LITERAL SUPER THIS VOID 
First(unary_expression) = BOOLEAN BOOLEAN_LITERAL BYTE CHAR CHARACTER_LITERAL COMP DOUBLE FLOAT FLOATING_POINT_LITERAL IDENTIFIER INT INTEGER_LITERAL LONG LPAREN MINUS MINUSMINUS NEW NOT NULL_LITERAL PLUS PLUSPLUS SHORT STRING_LITERAL SUPER THIS VOID 
First(preincrement_expression) = PLUSPLUS 
First(predecrement_expression) = MINUSMINUS 
First(unary_expression_not_plus_minus) = BOOLEAN BOOLEAN_LITERAL BYTE CHAR CHARACTER_LITERAL COMP DOUBLE FLOAT FLOATING_POINT_LITERAL IDENTIFIER INT INTEGER_LITERAL LONG LPAREN NEW NOT NULL_LITERAL SHORT STRING_LITERAL SUPER THIS VOID 
First(cast_expression) = LPAREN 
First(multiplicative_expression) = BOOLEAN BOOLEAN_LITERAL BYTE CHAR CHARACTER_LITERAL COMP DOUBLE FLOAT FLOATING_POINT_LITERAL IDENTIFIER INT INTEGER_LITERAL LONG LPAREN MINUS MINUSMINUS NEW NOT NULL_LITERAL PLUS PLUSPLUS SHORT STRING_LITERAL SUPER THIS VOID 
First(additive_expression) = BOOLEAN BOOLEAN_LITERAL BYTE CHAR CHARACTER_LITERAL COMP DOUBLE FLOAT FLOATING_POINT_LITERAL IDENTIFIER INT INTEGER_LITERAL LONG LPAREN MINUS MINUSMINUS NEW NOT NULL_LITERAL PLUS PLUSPLUS SHORT STRING_LITERAL SUPER THIS VOID 
First(shift_expression) = BOOLEAN BOOLEAN_LITERAL BYTE CHAR CHARACTER_LITERAL COMP DOUBLE FLOAT FLOATING_POINT_LITERAL IDENTIFIER INT INTEGER_LITERAL LONG LPAREN MINUS MINUSMINUS NEW NOT NULL_LITERAL PLUS PLUSPLUS SHORT STRING_LITERAL SUPER THIS VOID 
First(relational_expression) = BOOLEAN BOOLEAN_LITERAL BYTE CHAR CHARACTER_LITERAL COMP DOUBLE FLOAT FLOATING_POINT_LITERAL IDENTIFIER INT INTEGER_LITERAL LONG LPAREN MINUS MINUSMINUS NEW NOT NULL_LITERAL PLUS PLUSPLUS SHORT STRING_LITERAL SUPER THIS VOID 
First(equality_expression) = BOOLEAN BOOLEAN_LITERAL BYTE CHAR CHARACTER_LITERAL COMP DOUBLE FLOAT FLOATING_POINT_LITERAL IDENTIFIER INT INTEGER_LITERAL LONG LPAREN MINUS MINUSMINUS NEW NOT NULL_LITERAL PLUS PLUSPLUS SHORT STRING_LITERAL SUPER THIS VOID 
First(and_expression) = BOOLEAN BOOLEAN_LITERAL BYTE CHAR CHARACTER_LITERAL COMP DOUBLE FLOAT FLOATING_POINT_LITERAL IDENTIFIER INT INTEGER_LITERAL LONG LPAREN MINUS MINUSMINUS NEW NOT NULL_LITERAL PLUS PLUSPLUS SHORT STRING_LITERAL SUPER THIS VOID 
First(exclusive_or_expression) = BOOLEAN BOOLEAN_LITERAL BYTE CHAR CHARACTER_LITERAL COMP DOUBLE FLOAT FLOATING_POINT_LITERAL IDENTIFIER INT INTEGER_LITERAL LONG LPAREN MINUS MINUSMINUS NEW NOT NULL_LITERAL PLUS PLUSPLUS SHORT STRING_LITERAL SUPER THIS VOID 
First(inclusive_or_expression) = BOOLEAN BOOLEAN_LITERAL BYTE CHAR CHARACTER_LITERAL COMP DOUBLE FLOAT FLOATING_POINT_LITERAL IDENTIFIER INT INTEGER_LITERAL LONG LPAREN MINUS MINUSMINUS NEW NOT NULL_LITERAL PLUS PLUSPLUS SHORT STRING_LITERAL SUPER THIS VOID 
First(conditional_and_expression) = BOOLEAN BOOLEAN_LITERAL BYTE CHAR CHARACTER_LITERAL COMP DOUBLE FLOAT FLOATING_POINT_LITERAL IDENTIFIER INT INTEGER_LITERAL LONG LPAREN MINUS MINUSMINUS NEW NOT NULL_LITERAL PLUS PLUSPLUS SHORT STRING_LITERAL SUPER THIS VOID 
First(conditional_or_expression) = BOOLEAN BOOLEAN_LITERAL BYTE CHAR CHARACTER_LITERAL COMP DOUBLE FLOAT FLOATING_POINT_LITERAL IDENTIFIER INT INTEGER_LITERAL LONG LPAREN MINUS MINUSMINUS NEW NOT NULL_LITERAL PLUS PLUSPLUS SHORT STRING_LITERAL SUPER THIS VOID 
First(conditional_expression) = BOOLEAN BOOLEAN_LITERAL BYTE CHAR CHARACTER_LITERAL COMP DOUBLE FLOAT FLOATING_POINT_LITERAL IDENTIFIER INT INTEGER_LITERAL LONG LPAREN MINUS MINUSMINUS NEW NOT NULL_LITERAL PLUS PLUSPLUS SHORT STRING_LITERAL SUPER THIS VOID 
First(assignment_expression) = BOOLEAN BOOLEAN_LITERAL BYTE CHAR CHARACTER_LITERAL COMP DOUBLE FLOAT FLOATING_POINT_LITERAL IDENTIFIER INT INTEGER_LITERAL LONG LPAREN MINUS MINUSMINUS NEW NOT NULL_LITERAL PLUS PLUSPLUS SHORT STRING_LITERAL SUPER THIS VOID 
First(assignment) = BOOLEAN BOOLEAN_LITERAL BYTE CHAR CHARACTER_LITERAL DOUBLE FLOAT FLOATING_POINT_LITERAL IDENTIFIER INT INTEGER_LITERAL LONG LPAREN NEW NULL_LITERAL SHORT STRING_LITERAL SUPER THIS VOID 
First(assignment_operator) = ANDEQ DIVEQ EQ LSHIFTEQ MINUSEQ MODEQ MULTEQ OREQ PLUSEQ RSHIFTEQ URSHIFTEQ XOREQ 
First(expression_opt) = BOOLEAN BOOLEAN_LITERAL BYTE CHAR CHARACTER_LITERAL COMP DOUBLE FLOAT FLOATING_POINT_LITERAL IDENTIFIER INT INTEGER_LITERAL LONG LPAREN MINUS MINUSMINUS NEW NOT NULL_LITERAL PLUS PLUSPLUS SHORT STRING_LITERAL SUPER THIS VOID 
First(expression) = BOOLEAN BOOLEAN_LITERAL BYTE CHAR CHARACTER_LITERAL COMP DOUBLE FLOAT FLOATING_POINT_LITERAL IDENTIFIER INT INTEGER_LITERAL LONG LPAREN MINUS MINUSMINUS NEW NOT NULL_LITERAL PLUS PLUSPLUS SHORT STRING_LITERAL SUPER THIS VOID 
First(constant_expression) = BOOLEAN BOOLEAN_LITERAL BYTE CHAR CHARACTER_LITERAL COMP DOUBLE FLOAT FLOATING_POINT_LITERAL IDENTIFIER INT INTEGER_LITERAL LONG LPAREN MINUS MINUSMINUS NEW NOT NULL_LITERAL PLUS PLUSPLUS SHORT STRING_LITERAL SUPER THIS VOID 
First(START) = ABSTRACT CLASS EOF FINAL IMPORT INTERFACE NATIVE PACKAGE PRIVATE PROTECTED PUBLIC SEMICOLON STATIC STRICTFP SYNCHRONIZED TRANSIENT VOLATILE 

Nullable Set = argument_list_opt block_statements_opt catches_opt class_body_declarations_opt compilation_unit dims_opt expression_opt extends_interfaces_opt for_init_opt for_update_opt formal_parameter_list_opt goal identifier_opt import_declarations_opt interface_member_declarations_opt interfaces_opt modifiers_opt package_declaration_opt super_opt throws_opt type_declarations_opt 
