using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
class Generator{
public static Parser<object> make_parser()
{
Parser<object> parser1 = new Parser<object>(7,27);
RGrule rule = new RGrule("start");
rule = new RGrule("E");
rule.RuleAction = (pstack) => {  Expr n = (Expr)pstack.Pop().Value; return n; };
parser1.Rules.Add(rule);
rule = new RGrule("E");
rule.RuleAction = (pstack) => {  Expr e2 = (Expr)pstack.Pop().Value; pstack.Pop();  Expr e1 = (Expr)pstack.Pop().Value; return Plus(e1,e2); };
parser1.Rules.Add(rule);
rule = new RGrule("E");
rule.RuleAction = (pstack) => {  Expr e2 = (Expr)pstack.Pop().Value; pstack.Pop();  Expr e1 = (Expr)pstack.Pop().Value; return Minus(e1,e2); };
parser1.Rules.Add(rule);
rule = new RGrule("E");
rule.RuleAction = (pstack) => {  Expr e2 = (Expr)pstack.Pop().Value; pstack.Pop();  Expr e1 = (Expr)pstack.Pop().Value; return Times(e1,e2); };
parser1.Rules.Add(rule);
rule = new RGrule("E");
rule.RuleAction = (pstack) => {  Expr e = (Expr)pstack.Pop().Value; pstack.Pop(); return Negative(e); };
parser1.Rules.Add(rule);
rule = new RGrule("E");
rule.RuleAction = (pstack) => { pstack.Pop();  Expr e = (Expr)pstack.Pop().Value; pstack.Pop(); return e; };
parser1.Rules.Add(rule);
rule = new RGrule("START");
rule.RuleAction = (pstack) => { pstack.Pop(); pstack.Pop(); return default(object);};
parser1.Rules.Add(rule);
parser1.RSM[0].Add("int",new Shift(1));
parser1.RSM[0].Add("E",new GotoState(2));
parser1.RSM[0].Add("-",new Shift(3));
parser1.RSM[0].Add("(",new Shift(4));
parser1.RSM[1].Add("-",new Reduce(0));
parser1.RSM[1].Add("*",new Reduce(0));
parser1.RSM[1].Add("+",new Reduce(0));
parser1.RSM[1].Add("EOF",new Reduce(0));
parser1.RSM[2].Add("+",new Shift(5));
parser1.RSM[2].Add("-",new Shift(6));
parser1.RSM[2].Add("*",new Shift(7));
parser1.RSM[2].Add("EOF",new GotoState(8));
parser1.RSM[3].Add("int",new Shift(1));
parser1.RSM[3].Add("E",new GotoState(9));
parser1.RSM[3].Add("-",new Shift(3));
parser1.RSM[3].Add("(",new Shift(4));
parser1.RSM[4].Add("int",new Shift(10));
parser1.RSM[4].Add("E",new GotoState(11));
parser1.RSM[4].Add("-",new Shift(12));
parser1.RSM[4].Add("(",new Shift(13));
parser1.RSM[5].Add("int",new Shift(1));
parser1.RSM[5].Add("E",new GotoState(14));
parser1.RSM[5].Add("-",new Shift(3));
parser1.RSM[5].Add("(",new Shift(4));
parser1.RSM[6].Add("int",new Shift(1));
parser1.RSM[6].Add("E",new GotoState(15));
parser1.RSM[6].Add("-",new Shift(3));
parser1.RSM[6].Add("(",new Shift(4));
parser1.RSM[7].Add("int",new Shift(1));
parser1.RSM[7].Add("E",new GotoState(16));
parser1.RSM[7].Add("-",new Shift(3));
parser1.RSM[7].Add("(",new Shift(4));
parser1.RSM[8].Add("EOF",new Accept());
parser1.RSM[9].Add("-",new Shift(6));
parser1.RSM[9].Add("*",new Shift(7));
parser1.RSM[9].Add("+",new Shift(5));
parser1.RSM[9].Add("EOF",new Reduce(4));
parser1.RSM[10].Add("-",new Reduce(0));
parser1.RSM[10].Add(")",new Reduce(0));
parser1.RSM[10].Add("*",new Reduce(0));
parser1.RSM[10].Add("+",new Reduce(0));
parser1.RSM[11].Add("+",new Shift(17));
parser1.RSM[11].Add("-",new Shift(18));
parser1.RSM[11].Add("*",new Shift(19));
parser1.RSM[11].Add(")",new Shift(20));
parser1.RSM[12].Add("int",new Shift(10));
parser1.RSM[12].Add("E",new GotoState(21));
parser1.RSM[12].Add("-",new Shift(12));
parser1.RSM[12].Add("(",new Shift(13));
parser1.RSM[13].Add("int",new Shift(10));
parser1.RSM[13].Add("E",new GotoState(22));
parser1.RSM[13].Add("-",new Shift(12));
parser1.RSM[13].Add("(",new Shift(13));
parser1.RSM[14].Add("-",new Shift(6));
parser1.RSM[14].Add("*",new Shift(7));
parser1.RSM[14].Add("+",new Shift(5));
parser1.RSM[14].Add("EOF",new Reduce(1));
parser1.RSM[15].Add("-",new Shift(6));
parser1.RSM[15].Add("*",new Shift(7));
parser1.RSM[15].Add("+",new Shift(5));
parser1.RSM[15].Add("EOF",new Reduce(2));
parser1.RSM[16].Add("-",new Shift(6));
parser1.RSM[16].Add("*",new Shift(7));
parser1.RSM[16].Add("+",new Shift(5));
parser1.RSM[16].Add("EOF",new Reduce(3));
parser1.RSM[17].Add("int",new Shift(10));
parser1.RSM[17].Add("E",new GotoState(23));
parser1.RSM[17].Add("-",new Shift(12));
parser1.RSM[17].Add("(",new Shift(13));
parser1.RSM[18].Add("int",new Shift(10));
parser1.RSM[18].Add("E",new GotoState(24));
parser1.RSM[18].Add("-",new Shift(12));
parser1.RSM[18].Add("(",new Shift(13));
parser1.RSM[19].Add("int",new Shift(10));
parser1.RSM[19].Add("E",new GotoState(25));
parser1.RSM[19].Add("-",new Shift(12));
parser1.RSM[19].Add("(",new Shift(13));
parser1.RSM[20].Add("-",new Reduce(5));
parser1.RSM[20].Add("*",new Reduce(5));
parser1.RSM[20].Add("+",new Reduce(5));
parser1.RSM[20].Add("EOF",new Reduce(5));
parser1.RSM[21].Add("-",new Shift(18));
parser1.RSM[21].Add(")",new Reduce(4));
parser1.RSM[21].Add("*",new Shift(19));
parser1.RSM[21].Add("+",new Shift(17));
parser1.RSM[22].Add("+",new Shift(17));
parser1.RSM[22].Add("-",new Shift(18));
parser1.RSM[22].Add("*",new Shift(19));
parser1.RSM[22].Add(")",new Shift(26));
parser1.RSM[23].Add("-",new Shift(18));
parser1.RSM[23].Add(")",new Reduce(1));
parser1.RSM[23].Add("*",new Shift(19));
parser1.RSM[23].Add("+",new Shift(17));
parser1.RSM[24].Add("-",new Shift(18));
parser1.RSM[24].Add(")",new Reduce(2));
parser1.RSM[24].Add("*",new Shift(19));
parser1.RSM[24].Add("+",new Shift(17));
parser1.RSM[25].Add("-",new Shift(18));
parser1.RSM[25].Add(")",new Reduce(3));
parser1.RSM[25].Add("*",new Shift(19));
parser1.RSM[25].Add("+",new Shift(17));
parser1.RSM[26].Add("-",new Reduce(5));
parser1.RSM[26].Add(")",new Reduce(5));
parser1.RSM[26].Add("*",new Reduce(5));
parser1.RSM[26].Add("+",new Reduce(5));
return parser1;
}//make_parser
} // Generator Class