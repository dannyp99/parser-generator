using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
class Generator{
public Parser<object> make_parser()
{
Parser<object> parser1 = new Parser<object>(7,23);
RGrule rule = new RGrule("start");
rule = new RGrule("E");
rule.RuleAction = (pstack) => {  int t = (int)pstack.Pop().Value;pstack.Pop(); int e = (int)pstack.Pop().Value;return e+t; };
parser1.Rules.Add(rule);
rule = new RGrule("E");
rule.RuleAction = (pstack) => {  int t = (int)pstack.Pop().Value;return t; };
parser1.Rules.Add(rule);
rule = new RGrule("T");
rule.RuleAction = (pstack) => {  int f = (int)pstack.Pop().Value;pstack.Pop(); int t = (int)pstack.Pop().Value;return t*f; };
parser1.Rules.Add(rule);
rule = new RGrule("T");
rule.RuleAction = (pstack) => {  int f = (int)pstack.Pop().Value;return f; };
parser1.Rules.Add(rule);
rule = new RGrule("F");
rule.RuleAction = (pstack) => { pstack.Pop(); int e = (int)pstack.Pop().Value;pstack.Pop();return e; };
parser1.Rules.Add(rule);
rule = new RGrule("F");
rule.RuleAction = (pstack) => {  int n = (int)pstack.Pop().Value;return n; };
parser1.Rules.Add(rule);
rule = new RGrule("START");
rule.RuleAction = (pstack) => { pstack.Pop(); int e = (int)pstack.Pop().Value;return default(object);};
parser1.Rules.Add(rule);
parser1.RSM[0].Add("E",new GotoState(1));
parser1.RSM[0].Add("T",new GotoState(2));
parser1.RSM[0].Add("F",new GotoState(3));
parser1.RSM[0].Add("(",new Shift(4));
parser1.RSM[0].Add("num",new Shift(5));
parser1.RSM[1].Add("+",new Shift(6));
parser1.RSM[1].Add("EOF",new Shift(7));
parser1.RSM[2].Add("+",new Reduce(1));
parser1.RSM[2].Add("EOF",new Reduce(1));
parser1.RSM[2].Add("*",new Shift(8));
parser1.RSM[3].Add("*",new Reduce(3));
parser1.RSM[3].Add("+",new Reduce(3));
parser1.RSM[3].Add("EOF",new Reduce(3));
parser1.RSM[4].Add("E",new GotoState(9));
parser1.RSM[4].Add("T",new GotoState(10));
parser1.RSM[4].Add("F",new GotoState(11));
parser1.RSM[4].Add("(",new Shift(12));
parser1.RSM[4].Add("num",new Shift(13));
parser1.RSM[5].Add("*",new Reduce(5));
parser1.RSM[5].Add("+",new Reduce(5));
parser1.RSM[5].Add("EOF",new Reduce(5));
parser1.RSM[6].Add("T",new GotoState(14));
parser1.RSM[6].Add("F",new GotoState(3));
parser1.RSM[6].Add("(",new Shift(4));
parser1.RSM[6].Add("num",new Shift(5));
parser1.RSM[7].Add("EOF",new Accept());
parser1.RSM[8].Add("F",new GotoState(15));
parser1.RSM[8].Add("(",new Shift(4));
parser1.RSM[8].Add("num",new Shift(5));
parser1.RSM[9].Add("+",new Shift(16));
parser1.RSM[9].Add(")",new Shift(17));
parser1.RSM[10].Add(")",new Reduce(1));
parser1.RSM[10].Add("+",new Reduce(1));
parser1.RSM[10].Add("*",new Shift(18));
parser1.RSM[11].Add(")",new Reduce(3));
parser1.RSM[11].Add("*",new Reduce(3));
parser1.RSM[11].Add("+",new Reduce(3));
parser1.RSM[12].Add("E",new GotoState(19));
parser1.RSM[12].Add("T",new GotoState(10));
parser1.RSM[12].Add("F",new GotoState(11));
parser1.RSM[12].Add("(",new Shift(12));
parser1.RSM[12].Add("num",new Shift(13));
parser1.RSM[13].Add(")",new Reduce(5));
parser1.RSM[13].Add("*",new Reduce(5));
parser1.RSM[13].Add("+",new Reduce(5));
parser1.RSM[14].Add("+",new Reduce(0));
parser1.RSM[14].Add("EOF",new Reduce(0));
parser1.RSM[14].Add("*",new Shift(8));
parser1.RSM[15].Add("*",new Reduce(2));
parser1.RSM[15].Add("+",new Reduce(2));
parser1.RSM[15].Add("EOF",new Reduce(2));
parser1.RSM[16].Add("T",new GotoState(20));
parser1.RSM[16].Add("F",new GotoState(11));
parser1.RSM[16].Add("(",new Shift(12));
parser1.RSM[16].Add("num",new Shift(13));
parser1.RSM[17].Add("*",new Reduce(4));
parser1.RSM[17].Add("+",new Reduce(4));
parser1.RSM[17].Add("EOF",new Reduce(4));
parser1.RSM[18].Add("F",new GotoState(21));
parser1.RSM[18].Add("(",new Shift(12));
parser1.RSM[18].Add("num",new Shift(13));
parser1.RSM[19].Add("+",new Shift(16));
parser1.RSM[19].Add(")",new Shift(22));
parser1.RSM[20].Add(")",new Reduce(0));
parser1.RSM[20].Add("+",new Reduce(0));
parser1.RSM[20].Add("*",new Shift(18));
parser1.RSM[21].Add(")",new Reduce(2));
parser1.RSM[21].Add("*",new Reduce(2));
parser1.RSM[21].Add("+",new Reduce(2));
parser1.RSM[22].Add(")",new Reduce(4));
parser1.RSM[22].Add("*",new Reduce(4));
parser1.RSM[22].Add("+",new Reduce(4));
return parser1;
}//make_parser
} // Generator Class